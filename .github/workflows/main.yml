name: Continuous Integration and Delivery # 工作流名称：持续集成与交付

on: # 触发条件
  push: # 在推送代码时触发
    branches: [main] # 仅当推送到 main 分支时触发

env: # 环境变量
  WEBSITE_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/website # 定义网站镜像的名称，转换为小写
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx # 定义 NGINX 镜像的名称，转换为小写
  REGISTRY: ghcr.io # 定义镜像仓库地址

jobs: # 工作流的具体任务
  build: # 任务名称：构建 Docker 镜像
    name: Build the Docker Image # 任务名称
    runs-on: ubuntu-latest # 任务运行环境：最新的 Ubuntu

    steps: # 任务的具体步骤
      - name: checkout main # 步骤名称：检出代码
        uses: actions/checkout@v3 # 使用 GitHub 官方的 checkout 动作检出代码

      - name: Set environment variables to .env # 步骤名称：设置环境变量到 .env 文件
        run: | # 运行以下命令
          echo "WEBSITE_IMAGE=$(echo ${{env.WEBSITE_IMAGE}} )" >> $GITHUB_ENV # 将 WEBSITE_IMAGE 环境变量写入 .env 文件
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV # 将 NGINX_IMAGE 环境变量写入 .env 文件

      - name: Log in to GitHub Packages # 步骤名称：登录到 GitHub Packages
        env: # 设置环境变量
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # 使用 GitHub Secrets 中存储的访问令牌
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin # 使用访问令牌登录到 GitHub 镜像仓库

      - name: Pull images # 步骤名称：拉取镜像
        run: | # 运行以下命令
          docker pull ${{ env.WEBSITE_IMAGE }} || true # 尝试拉取网站镜像，如果失败继续执行
          docker pull ${{ env.NGINX_IMAGE }} || true # 尝试拉取 NGINX 镜像，如果失败继续执行

      - name: Build images # 步骤名称：构建镜像
        id: build-images # 设置步骤 ID，供后续步骤引用
        run: | # 运行以下命令
          docker-compose -f docker-compose.ci.yml build 2>error >&1 # 使用 docker-compose 根据 ci 配置文件构建镜像，并将错误输出重定向到 error 文件

      - name: Push images # 步骤名称：推送镜像
        run: | # 运行以下命令
          docker push ${{ env.WEBSITE_IMAGE }} # 推送网站镜像到镜像仓库
          docker push ${{ env.NGINX_IMAGE }} # 推送 NGINX 镜像到镜像仓库

      - name: create an issue # 步骤名称：创建 Issue
        if: ${{ failure() }} # 仅在之前的步骤失败时执行
        run: | # 运行以下命令
          echo $(cat error) # 输出错误信息
          ERROR=$(cat error) # 读取错误信息到变量
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue for a commit: ${{ github.job }}", # Issue 标题
            "body": "## Description\n\nThis issue was automatically created by the GitHub Action.\n\nThe Job **`${{github.job}}`** of the workflow run **`${{github.run_number}}`** failed with the following error:\n\n`'"$ERROR"'`\n\n## Run details\n\n- Workflow: `${{ github.workflow }}`\n\n- The actor of the run: `${{ github.triggering_actor }}`\n\n- The commit hash was: _${{ github.sha }}_\n\nKindly fix it in the shortest time possible.\n\nThank you." # Issue 内容，包含错误信息和运行详情
            }' \
          --fail # 如果请求失败，抛出错误

  deploy: # 部署任务
    name: Deploy to Server # 任务名称：部署到服务器
    runs-on: ubuntu-latest # 任务运行环境：最新的 Ubuntu
    needs: build # 依赖于之前的 build 任务

    steps: # 任务的具体步骤
      - name: Checkout code # 步骤名称：检出代码
        uses: actions/checkout@v4 # 使用 GitHub 官方的 checkout 动作检出代码

      - name: Login to Alibaba Cloud # 步骤名称：登录到阿里云
        run: docker login --username=${{ secrets.ALIYUN_USERNAME }} --password=${{ secrets.ALIYUN_PASSWORD }} registry.cn-hangzhou.aliyuncs.com # 使用阿里云的用户名和密码登录镜像仓库

      - name: Build and push Docker image # 步骤名称：构建并推送 Docker 镜像
        uses: docker/build-push-action@v2 # 使用 docker 官方的 build-push 动作
        with: # 配置参数
          context: . # 使用当前目录作为构建上下文
          file: ./Dockerfile # 使用当前目录下的 Dockerfile 文件
          push: true # 构建完成后推送镜像
          tags: registry.cn-hangzhou.aliyuncs.com/docker-images-lssh/draw-pictures-demo-next:latest # 镜像的标签，修改为你的阿里云镜像仓库地址

      - name: SSH to Server and Deploy # 步骤名称：通过 SSH 部署到服务器
        uses: appleboy/ssh-action@master # 使用 appleboy 的 ssh 动作
        with: # 配置参数
          host: ${{ secrets.SERVER_HOST }} # 服务器 IP 地址，从 GitHub Secrets 中获取
          username: ${{ secrets.SERVER_USERNAME }} # SSH 用户名，从 GitHub Secrets 中获取
          key: ${{ secrets.SERVER_SSH_KEY }} # 用于连接服务器的私钥，从 GitHub Secrets 中获取
          script: | # 运行以下命令
            docker pull registry.cn-hangzhou.aliyuncs.com/docker-images-lssh/draw-pictures-demo-next:latest # 从阿里云镜像仓库拉取最新的镜像
            docker stop draw-pictures-demo-next || true # 停止正在运行的容器，如果没有容器在运行，则忽略错误
            docker rm draw-pictures-demo-next || true # 删除容器，如果没有容器，则忽略错误
            docker run -d --name draw-pictures-demo-next -p 80:80 registry.cn-hangzhou.aliyuncs.com/docker-images-lssh/draw-pictures-demo-next:latest # 运行新的容器，并将端口 80 映射到主机的端口 80
            docker-compose --env-file=.env -f docker-compose.prod.yml up -d # 使用 docker-compose 根据 .env 文件和 prod 配置文件启动服务
